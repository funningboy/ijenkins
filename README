#20130712 demo case for Jenkins run

# step 0 setup your DUT
#   1. easy_install nose      # unittest manager
#   https://github.com/nose-devs/nose
#   2. easy_install coverage  # coverage analyzer
#   3. easy_install pylint
#   4. prepare your unttest wrapper...
#   5. pre test run
#     % ./runtest
#   ref: nose, coverage, plint
#
# step 1 setup git env
# git version control
#   1. create local git
#     cd <your_git_path>
#     git init
#     git add .
#     git commit -m "your commit info"
#     git log # check the commit version is upload
#   2. create local repo
#     cd <your_repo_path> # the repo path
#     mkdir <your_name>.git
#     cd <your_name>.git
#     git init --bare
#   3. push/pull your local git to repo
#     cd <your_path>
#     git remote add origin <your_repo_path>
#     git config --global user.name "<your_name>"
#     git config --global user.email "<your_mail>"
#     git push origin master
#   4. repeat terms 3 to each update
# ref: http://bhfsteve.blogspot.tw/2012/04/automated-python-unit-testing-code_27.html
#
# step 2 setup jenkins
# jenkins regression control
#   setup your testsuites
#
# jenkins commands, start exit, restart for IE set
#   http://localhost:8080/exit
#   http://localhost:8080/restart
#   http://localhost:8080/reload
#
# jenkins commands for MAC
# % sudo launchctl unload /Library/LaunchDaemons/org.jenkins-ci.plist
# % sudo launchctl load /Library/LaunchDaemons/org.jenkins-ci.plist
#   1. setup your git source
#   2. setup your shell script
#   3. setup your coverage report
#   4. setup your unittest report
#   5. setup your notify list
#
#1. use nose to gen testsuite coverage
#2. use coverage to transfer coverage to xml format
#3. use jenkins to show gui result
